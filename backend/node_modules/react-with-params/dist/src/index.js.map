{"version":3,"sources":["../src/index.tsx"],"names":["React","extractParams","names","params","newProps","name","extractQueryParams","queryParamNames","queryString","substr","withParams","paramsNames","match","exactly","state","routeComponent","Route","routeProps","queryParams","displayName","WrappedComponent","Array","isArray","location","props","search"],"mappings":";;;;;;;;;AAAA;;AACA;;IAAYA,K;;AAEZ;;;;AACA;;;;AACA;;;;;;;;AAEA,SAAAC,aAAA,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAoC;AAClC,QAAI,CAACD,KAAD,IAAU,CAACC,MAAf,EAAuB;AACvB,QAAMC,WAAW,EAACD,cAAD,EAAjB;AAFkC;AAAA;AAAA;;AAAA;AAIlC,6BAAmBD,KAAnB,8HAA0B;AAAA,gBAAfG,IAAe;;AACxBD,qBAASC,IAAT,IAAiBF,OAAOE,IAAP,CAAjB;AACD;AANiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQlC,WAAOD,QAAP;AACD;AAED,SAAAE,kBAAA,CAA4BC,eAA5B,EAA6CC,WAA7C,EAAwD;AACtD,WAAOP,cAAcM,eAAd,EAA+B,wBAAMC,YAAYC,MAAZ,CAAmB,CAAnB,CAAN,CAA/B,CAAP;AACD;AAYD;;;;;;;;;;;;;;;;;AAiBO,IAAMC,kCAAa,SAAbA,UAAa;AAAA,mFAKX,EALW;AAAA,QAEdC,WAFc,QAEtBR,MAFsB;AAAA,QAEDS,KAFC,QAEDA,KAFC;AAAA,4BAEMC,OAFN;AAAA,QAEMA,OAFN,gCAEgB,IAFhB;AAAA,QAGtBC,KAHsB,QAGtBA,KAHsB;AAAA,mCAGfC,cAHe;AAAA,QAGCC,KAHD;AAAA,QAItBC,UAJsB,QAItBA,UAJsB;AAAA,QAIVC,WAJU,QAIVA,WAJU;;AAAA,WAMrB,4BAAgB;AACnB,YAAMC,cAAc,+BAAgBC,gBAAhB,EAAkC,YAAlC,CAApB;AAEAT,sBAAcU,MAAMC,OAAN,CAAcX,WAAd,IAA6BA,WAA7B,GAA2C,CAACA,WAAD,CAAzD;AACAO,sBAAcG,MAAMC,OAAN,CAAcJ,WAAd,IAA6BA,WAA7B,GAA2C,CAACA,WAAD,CAAzD;AAEA,YAAIJ,KAAJ,EAAW;AACTA,oBAAQO,MAAMC,OAAN,CAAcR,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAvC;AACD;AAED,YAAIF,KAAJ,EAAW;AACT,mBAAO,8BAAeO,WAAf,EAA4B;AAAA,uBACjC,oBAAC,KAAD,eAAWF,UAAX,IAAuB,OAAOJ,OAA9B,EAAuC,MAAMD,KAA7C,EAAoD,QAAQ;AAAA,gDAAEA,KAAF;AAAA,kEAAoB,EAACT,QAAQ,EAAT,EAApB;AAAA,4BAAUA,MAAV,eAAUA,MAAV;AAAA,4BAAkCoB,QAAlC,SAAkCA,QAAlC;AAAA,+BAC1D,oBAAC,gBAAD,eAAsBC,KAAtB,EACMvB,cAAcU,WAAd,EAA2BR,MAA3B,CADN,EAEMF,cAAca,KAAd,EAAqBS,SAAST,KAA9B,CAFN,EAGMR,mBAAmBY,WAAnB,EAAgCK,SAASE,MAAzC,CAHN,EAD0D;AAAA,qBAA5D,IADiC;AAAA,aAA5B,CAAP;AASD;AAED,eAAO,8BAAeN,WAAf,EACL;AAAA,mBAAS,oBAAC,gBAAD,eAAsBK,KAAtB,EAAiCvB,cAAcU,WAAd,EAA2Ba,MAAMrB,MAAjC,CAAjC,EAAT;AAAA,SADK,CAAP;AAGD,KA/ByB;AAAA,CAAnB","file":"index.js","sourcesContent":["import {parse} from 'querystring'\nimport * as React from 'react'\nimport {ReactType} from 'react'\nimport DefaultRoute from 'react-router/Route'\nimport setDisplayName from 'recompose/setDisplayName'\nimport wrapDisplayName from 'recompose/wrapDisplayName'\n\nfunction extractParams(names, params) {\n  if (!names || !params) return\n  const newProps = {params}\n\n  for (const name of names) {\n    newProps[name] = params[name]\n  }\n\n  return newProps\n}\n\nfunction extractQueryParams(queryParamNames, queryString) {\n  return extractParams(queryParamNames, parse(queryString.substr(1)))\n}\n\nexport type Options = {\n  params?: string|Array<string>,\n  match?: string\n  exactly?: boolean\n  state?: string|Array<string>\n  routeComponent?: ReactType\n  routeProps?: any\n  queryParams?: string|Array<string>\n}\n\n/**\n * HOC for extracting router params.\n *\n * Example:\n *\n * ```typescript\n * const ShowName = withParams({params: 'name', match: '/user/:name'})(({name}) =>\n *   <span>{name}</span>\n * )\n * ```\n *\n * ```typescript\n * const ShowIdAndName = withParams({params: ['id', 'name'], match: '/user/:id/:name'})(({id, name}) =>\n *   <span>{id}{name}</span>\n * )\n * ```\n */\nexport const withParams = (\n  {\n    params: paramsNames, match, exactly = true,\n    state, routeComponent: Route = DefaultRoute,\n    routeProps, queryParams,\n  }: Options = {}\n) => WrappedComponent => {\n  const displayName = wrapDisplayName(WrappedComponent, 'withParams')\n\n  paramsNames = Array.isArray(paramsNames) ? paramsNames : [paramsNames]\n  queryParams = Array.isArray(queryParams) ? queryParams : [queryParams]\n\n  if (state) {\n    state = Array.isArray(state) ? state : [state]\n  }\n\n  if (match) {\n    return setDisplayName(displayName)(props =>\n      <Route {...routeProps} exact={exactly} path={match} render={({match: {params} = {params: []}, location}) =>\n        <WrappedComponent {...props}\n          {...extractParams(paramsNames, params)}\n          {...extractParams(state, location.state)}\n          {...extractQueryParams(queryParams, location.search)}\n        />\n      } />\n    )\n  }\n\n  return setDisplayName(displayName)(\n    props => <WrappedComponent {...props} {...extractParams(paramsNames, props.params)} />\n  )\n}\n"]}