{"version":3,"sources":["../src/index.test.tsx"],"names":["React","describe","it","ShowName","params","match","name","wrapper","expect","toMatchSnapshot","ShowIdAndName","id","exactly","Display","queryParams","next","timestamp"],"mappings":";;AAAA;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;AACA;;;;;;AAEAC,SAAS,YAAT,EAAuB,YAAA;AACrBC,OAAG,+BAAH,EAAoC,YAAA;AAClC,YAAMC,WAAW,uBAAW,EAACC,QAAQ,MAAT,EAAiBC,OAAO,aAAxB,EAAX,EAAmD;AAAA,gBAAEC,IAAF,QAAEA,IAAF;AAAA,mBAClE;AAAA;AAAA;AAAOA;AAAP,aADkE;AAAA,SAAnD,CAAjB;AAIA,YAAMC,UAAU,oBACd;AAAA;AAAA,cAAQ,gBAAgB,CAAC,WAAD,CAAxB;AACE,gCAAC,QAAD;AADF,SADc,CAAhB;AAMAC,eAAO,4BAAOD,OAAP,CAAP,EAAwBE,eAAxB;AACD,KAZD;AAcAP,OAAG,gCAAH,EAAqC,YAAA;AACnC,YAAMQ,gBAAgB,uBAAW,EAACN,QAAQ,CAAC,IAAD,EAAO,MAAP,CAAT,EAAyBC,OAAO,iBAAhC,EAAX,EAA+D;AAAA,gBAAEM,EAAF,SAAEA,EAAF;AAAA,gBAAML,IAAN,SAAMA,IAAN;AAAA,mBACnF;AAAA;AAAA;AAAOK,kBAAP;AAAA;AAAcL;AAAd,aADmF;AAAA,SAA/D,CAAtB;AAIA,YAAMC,UAAU,oBACd;AAAA;AAAA,cAAQ,gBAAgB,CAAC,aAAD,CAAxB;AACE,gCAAC,aAAD;AADF,SADc,CAAhB;AAMAC,eAAO,4BAAOD,OAAP,CAAP,EAAwBE,eAAxB;AACD,KAZD;AAcAP,OAAG,0CAAH,EAA+C,YAAA;AAC7C,YAAMQ,gBAAgB,uBAAW;AAC/BN,oBAAQ,CAAC,IAAD,EAAO,MAAP,CADuB;AAE/BC,mBAAO,iBAFwB;AAG/BO,qBAAS;AAHsB,SAAX,EAInB;AAAA,gBAAED,EAAF,SAAEA,EAAF;AAAA,gBAAML,IAAN,SAAMA,IAAN;AAAA,mBACD;AAAA;AAAA;AAAOK,kBAAP;AAAA;AAAcL;AAAd,aADC;AAAA,SAJmB,CAAtB;AAQA,YAAMC,UAAU,oBACd;AAAA;AAAA,cAAQ,gBAAgB,CAAC,uBAAD,CAAxB;AACE,gCAAC,aAAD;AADF,SADc,CAAhB;AAMAC,eAAO,4BAAOD,OAAP,CAAP,EAAwBE,eAAxB;AACD,KAhBD;AAkBAP,OAAG,yCAAH,EAA8C,YAAA;AAC5C,YAAMW,UAAU,uBAAW;AACzBC,yBAAa,MADY;AAEzBT,mBAAO;AAFkB,SAAX,EAGb;AAAA,gBAAEU,IAAF,SAAEA,IAAF;AAAA,mBACD;AAAA;AAAA;AAAOA;AAAP,aADC;AAAA,SAHa,CAAhB;AAOA,YAAMR,UAAU,oBACd;AAAA;AAAA,cAAQ,gBAAgB,CAAC,oBAAD,CAAxB;AACE,gCAAC,OAAD;AADF,SADc,CAAhB;AAMAC,eAAO,4BAAOD,OAAP,CAAP,EAAwBE,eAAxB;AACD,KAfD;AAiBAP,OAAG,0CAAH,EAA+C,YAAA;AAC7C,YAAMW,UAAU,uBAAW;AACzBC,yBAAa,CAAC,MAAD,EAAS,WAAT,CADY;AAEzBT,mBAAO;AAFkB,SAAX,EAGb;AAAA,gBAAEU,IAAF,SAAEA,IAAF;AAAA,gBAAQC,SAAR,SAAQA,SAAR;AAAA,mBACD;AAAA;AAAA;AAAOD,oBAAP;AAAA;AAAgBC;AAAhB,aADC;AAAA,SAHa,CAAhB;AAOA,YAAMT,UAAU,oBACd;AAAA;AAAA,cAAQ,gBAAgB,CAAC,4CAAD,CAAxB;AACE,gCAAC,OAAD;AADF,SADc,CAAhB;AAMAC,eAAO,4BAAOD,OAAP,CAAP,EAAwBE,eAAxB;AACD,KAfD;AAgBD,CAhFD","file":"index.test.js","sourcesContent":["import {render} from 'enzyme'\nimport toJson from 'enzyme-to-json'\nimport * as React from 'react'\nimport Router from 'react-router/MemoryRouter'\nimport {withParams} from './index'\n\ndescribe('withParams', () => {\n  it('should extract a single param', () => {\n    const ShowName = withParams({params: 'name', match: '/user/:name'})(({name}) =>\n      <span>{name}</span>\n    )\n\n    const wrapper = render(\n      <Router initialEntries={['/user/ben']}>\n        <ShowName />\n      </Router>\n    )\n\n    expect(toJson(wrapper)).toMatchSnapshot()\n  })\n\n  it('should extract multiple params', () => {\n    const ShowIdAndName = withParams({params: ['id', 'name'], match: '/user/:id/:name'})(({id, name}) =>\n      <span>{id} - {name}</span>\n    )\n\n    const wrapper = render(\n      <Router initialEntries={['/user/1/ben']}>\n        <ShowIdAndName />\n      </Router>\n    )\n\n    expect(toJson(wrapper)).toMatchSnapshot()\n  })\n\n  it('should extract params with exactly false', () => {\n    const ShowIdAndName = withParams({\n      params: ['id', 'name'],\n      match: '/user/:id/:name',\n      exactly: false,\n    })(({id, name}) =>\n      <span>{id} - {name}</span>\n    )\n\n    const wrapper = render(\n      <Router initialEntries={['/user/1/ben/the/third']}>\n        <ShowIdAndName />\n      </Router>\n    )\n\n    expect(toJson(wrapper)).toMatchSnapshot()\n  })\n\n  it('should extract a single query parameter', () => {\n    const Display = withParams({\n      queryParams: 'next',\n      match: '/users',\n    })(({next}) =>\n      <span>{next}</span>\n    )\n\n    const wrapper = render(\n      <Router initialEntries={['/users?next=/login']}>\n        <Display />\n      </Router>\n    )\n\n    expect(toJson(wrapper)).toMatchSnapshot()\n  })\n\n  it('should extract multiple query parameters', () => {\n    const Display = withParams({\n      queryParams: ['next', 'timestamp'],\n      match: '/users',\n    })(({next, timestamp}) =>\n      <span>{next} - {timestamp}</span>\n    )\n\n    const wrapper = render(\n      <Router initialEntries={['/users?next=/login&timestamp=1489995623368']}>\n        <Display />\n      </Router>\n    )\n\n    expect(toJson(wrapper)).toMatchSnapshot()\n  })\n})\n"]}