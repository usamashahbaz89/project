'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.withParams = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _querystring = require('querystring');

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _Route = require('react-router/Route');

var _Route2 = _interopRequireDefault(_Route);

var _setDisplayName = require('recompose/setDisplayName');

var _setDisplayName2 = _interopRequireDefault(_setDisplayName);

var _wrapDisplayName = require('recompose/wrapDisplayName');

var _wrapDisplayName2 = _interopRequireDefault(_wrapDisplayName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function extractParams(names, params) {
    if (!names || !params) return;
    var newProps = { params: params };
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var name = _step.value;

            newProps[name] = params[name];
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return newProps;
}
function extractQueryParams(queryParamNames, queryString) {
    return extractParams(queryParamNames, (0, _querystring.parse)(queryString.substr(1)));
}
/**
 * HOC for extracting router params.
 *
 * Example:
 *
 * ```typescript
 * const ShowName = withParams({params: 'name', match: '/user/:name'})(({name}) =>
 *   <span>{name}</span>
 * )
 * ```
 *
 * ```typescript
 * const ShowIdAndName = withParams({params: ['id', 'name'], match: '/user/:id/:name'})(({id, name}) =>
 *   <span>{id}{name}</span>
 * )
 * ```
 */
var withParams = exports.withParams = function withParams() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        paramsNames = _ref.params,
        match = _ref.match,
        _ref$exactly = _ref.exactly,
        exactly = _ref$exactly === undefined ? true : _ref$exactly,
        state = _ref.state,
        _ref$routeComponent = _ref.routeComponent,
        Route = _ref$routeComponent === undefined ? _Route2.default : _ref$routeComponent,
        routeProps = _ref.routeProps,
        queryParams = _ref.queryParams;

    return function (WrappedComponent) {
        var displayName = (0, _wrapDisplayName2.default)(WrappedComponent, 'withParams');
        paramsNames = Array.isArray(paramsNames) ? paramsNames : [paramsNames];
        queryParams = Array.isArray(queryParams) ? queryParams : [queryParams];
        if (state) {
            state = Array.isArray(state) ? state : [state];
        }
        if (match) {
            return (0, _setDisplayName2.default)(displayName)(function (props) {
                return React.createElement(Route, _extends({}, routeProps, { exact: exactly, path: match, render: function render(_ref2) {
                        var _ref2$match = _ref2.match;
                        _ref2$match = _ref2$match === undefined ? { params: [] } : _ref2$match;
                        var params = _ref2$match.params,
                            location = _ref2.location;
                        return React.createElement(WrappedComponent, _extends({}, props, extractParams(paramsNames, params), extractParams(state, location.state), extractQueryParams(queryParams, location.search)));
                    } }));
            });
        }
        return (0, _setDisplayName2.default)(displayName)(function (props) {
            return React.createElement(WrappedComponent, _extends({}, props, extractParams(paramsNames, props.params)));
        });
    };
};
//# sourceMappingURL=index.js.map
